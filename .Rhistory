ggtheme = ggthemes::theme_clean()
)+
labs(y = "Cumulative Incidence",
x = "Time (Days)")
survfit(Surv(tte,s) ~ Drug,data =survival_data %>%
dplyr::rename(Drug = drug_code)) %>%
ggsurvplot(xlim = c(0,100),break.x.by = 25,
fun = function(x)1-x,pval = T,
ggtheme = ggthemes::theme_clean(),
legend.title = ""
)+
labs(y = "Cumulative Incidence",
x = "Time (Days)")
?ggsurvplot()
# Run everything from this script to get the tables and figures and print them out on this markdown script
source("FH Health Test.R")
# Run everything from this script to get the tables and figures and print them out on this markdown script
source("FH Health Test.R")
tbl1
tbl.1
# Run everything from this script to get the tables and figures and print them out on this markdown script
source("FH Health Test.R")
tbl1
tbl2
tbl3
fig1
library(tidyverse)
library(ggplot2)
library(gtsummary)
library(survival)
library(survminer)
# read in data
pat_dx = read.csv("Patient_Diagnosis_(2).csv")
pat_txt = read.csv("Patient_Treatment_(2).csv")
#Data analysis questions
# 1. First, the clinic would like to know the distribution of cancer types across their patients.
# Please provide the clinic with this information. Note that patients can be diagnosed with
# more than one cancer.
# get the counts of diagnoses for each patient, remove duplicates
tbl1 = list(
pat_dx %>%
mutate(check = paste(patient_id,diagnosis)) %>%
filter(!duplicated(check)) %>%
select(diagnosis) %>%
tbl_summary(label = diagnosis ~ "Aggregate Diagnosis Count") %>%
modify_header(label = "") %>%
bold_labels() %>%
add_n(),
# get first diagnoses
pat_dx %>%
mutate(diagnosis_date = diagnosis_date %>% lubridate::mdy()) %>%
group_by(patient_id) %>%
arrange(desc(diagnosis_date)) %>%
slice(1) %>%
ungroup() %>%
select(diagnosis) %>%
tbl_summary(label = diagnosis ~ "First Diagnosis") %>%
bold_labels() %>%
modify_header(label = "") %>%
add_n()) %>%
tbl_stack() %>%
modify_header(stat_0 = "**Count**")
# 2. The clinic wants to know how long it takes for patients to start therapy after being
# diagnosed, which they consider to be helpful in understanding the quality of care for the
# patient. How long after being diagnosed do patients start treatment?
# arrange the dates so they are the earliest dates, make into a data frame
first_dx_txt_df = merge(pat_dx %>%
mutate(diagnosis_date = diagnosis_date %>% lubridate::mdy()) %>%
group_by(patient_id) %>%
arrange(diagnosis_date)  %>%
slice(1),
pat_txt %>%
mutate(treatment_date = treatment_date %>% lubridate::mdy()) %>%
group_by(patient_id) %>%
arrange(treatment_date) %>%
slice(1),
by = "patient_id",all.x = T) %>%
mutate(tte = difftime(treatment_date,diagnosis_date,units = "days") %>% as.numeric())
# look at the median and mean time, remove negative times
tbl2 = first_dx_txt_df %>%
filter(tte >= 0) %>%
select(tte) %>%
tbl_summary(label = tte ~ "Time to First Treatment From First Diagnosis (Days)",
type = everything() ~ "continuous2",
statistic = all_continuous() ~ c("{mean} ({sd})",
"{median} ({p25}, {p75})",
"{min}, {max}")) %>%
bold_labels() %>%
modify_header(label = "")
# 3. Which treatment regimens [i.e., drug(s)] do you think would be indicated to be used as
# first-line of treatment for breast cancer? What about colon cancer? (For more information
#                                                                     on first-line and second-line treatments, click here. Additionally, note that some patients
#                                                                      may receive more than one drug as part of their first-line treatment, i.e., combination
#                                                                      therapy)
tbl3 = first_dx_txt_df %>%
filter(tte>=0) %>%
select(diagnosis,drug_code) %>%
tbl_summary(by = diagnosis,
label = drug_code ~ "Treatment") %>%
add_p() %>%
bold_labels() %>%
modify_header(label = "")
# looks like A and B are associated more with Breast Cancer, C and D for Colon
# 4. Do the patients taking Drug A monotherapy vs. Drug B monotherapy as first-line therapy
# for breast cancer vary in terms of duration of therapy? Please include statistical tests and
# visualizations, as appropriate
survival_data = first_dx_txt_df %>%
filter(tte>=0) %>%
filter(grepl("A|B",drug_code)) %>%
mutate(s = 1)
fig1 = survfit(Surv(tte,s) ~ Drug,data =survival_data %>%
dplyr::rename(Drug = drug_code)) %>%
ggsurvplot(xlim = c(0,100),break.x.by = 25,
fun = function(x)1-x,pval = T,
ggtheme = ggthemes::theme_clean(),
legend.title = ""
)+
labs(y = "Cumulative Incidence",
x = "Time (Days)")
# the p-value is coming from the log rank test
# Below is a table to accompany it
save.image("FHTest.RData")
# read in the SHI inventory data
# https://www.huduser.gov/portal/datasets/assthsg.html#year2009-2023
library(tidyverse)
lapply(list.files("../Data/Raw Data/CBSA SHI/"),function(x){
print(x)
temp = openxlsx::read.xlsx(paste0("../Data/Raw Data/CBSA SHI/",x),detectDates = T)
if("Quarter" %in% colnames(temp)){
temp = temp %>%
mutate(year = openxlsx::convertToDate(Quarter)  %>% lubridate::year())
}
print(colnames(temp))
})
cbsa_shi_list = lapply(list.files("../Data/Raw Data/CBSA SHI/"),function(x){
print(x)
temp = openxlsx::read.xlsx(paste0("../Data/Raw Data/CBSA SHI/",x),detectDates = T)
if("Quarter" %in% colnames(temp)){
temp = temp %>%
mutate(year = openxlsx::convertToDate(Quarter)  %>% lubridate::year())
}
print(colnames(temp))
temp %>% return()
})
cbsa_shi_list %>%
do.call(gtools::smartbind(),.)
cbsa_shi_list %>%
do.call(gtools::smartbind(fill = NA),.)
cbsa_shi_list %>% length()
cbsa_shi_list[[15]]
colnames(cbsa_shi_list[[15]])
colnames(cbsa_shi_list[[15]]) %in% colnames(cbsa_shi_list[[1]])
colnames(cbsa_shi_list[[15]])[colnames(cbsa_shi_list[[15]]) %in% colnames(cbsa_shi_list[[1]])]
cbsa_shi_list = lapply(list.files("../Data/Raw Data/CBSA SHI/"),function(x){
print(x)
temp = openxlsx::read.xlsx(paste0("../Data/Raw Data/CBSA SHI/",x),detectDates = T)
if("Quarter" %in% colnames(temp)){
temp = temp %>%
mutate(year = openxlsx::convertToDate(Quarter)  %>% lubridate::year())
}else{
temp = temp %>%
mutate(Quarter = NA)
}
print(colnames(temp))
temp %>% return()
})
# get columns that should be the same beteween all of them and put into a df
cbsa_shi_df = lapply(cbsa_shi_list,function(x){
x %>%
select(gsl,states,entities,
sumlevel,program_label,program,
sub_program,name,code,
total_units,pct_occupied,number_reported,
pct_reported,months_since_report,pct_movein,
people_per_unit,people_total,rent_per_month,
spending_per_month,hh_income,person_income,
pct_lt5k,pct_5k_lt10k,pct_10k_lt15k,
pct_15k_lt20k,pct_ge20k,pct_wage_major,
pct_welfare_major,pct_other_major,pct_median,
pct_lt50_median,pct_lt30_median,pct_2adults,
pct_1adult,pct_female_head,pct_female_head_child,
pct_disabled_lt62,pct_disabled_ge62,pct_disabled_all,
pct_lt24_head,pct_age25_50,pct_age51_61,
pct_age62plus,pct_age85plus,pct_minority,
pct_hispanic,months_waiting,months_from_movein,
pct_utility_allow,ave_util_allow,pct_bed1,
pct_bed2,pct_bed3,pct_overhoused,
tpoverty,tminority,tpct_ownsfd,
fedhse,place,latitude,longitude,state,pha_total_units,
ha_size,year)}) %>%
do.call(rbind,.)
View(cbsa_shi_df)
# get columns that should be the same beteween all of them and put into a df
cbsa_shi_df = lapply(cbsa_shi_list,function(x){
x %>%
select(year,Quarter,gsl,states,code,entities,
sumlevel,program_label,program,
sub_program,name,
total_units,pct_occupied,number_reported,
pct_reported,months_since_report,pct_movein,
people_per_unit,people_total,rent_per_month,
spending_per_month,hh_income,person_income,
pct_lt5k,pct_5k_lt10k,pct_10k_lt15k,
pct_15k_lt20k,pct_ge20k,pct_wage_major,
pct_welfare_major,pct_other_major,pct_median,
pct_lt50_median,pct_lt30_median,pct_2adults,
pct_1adult,pct_female_head,pct_female_head_child,
pct_disabled_lt62,pct_disabled_ge62,pct_disabled_all,
pct_lt24_head,pct_age25_50,pct_age51_61,
pct_age62plus,pct_age85plus,pct_minority,
pct_hispanic,months_waiting,months_from_movein,
pct_utility_allow,ave_util_allow,pct_bed1,
pct_bed2,pct_bed3,pct_overhoused,
tpoverty,tminority,tpct_ownsfd,
fedhse,place,latitude,longitude,state,pha_total_units,
ha_size)}) %>%
do.call(rbind,.)
# remove list to free up space
rm("cbsa_shi_list")
View(cbsa_shi_df)
cbsa_shi_df %>% summary()
cbsa_shi_df$program
cbsa_shi_df$program_label
# check summary for each summary level
cbsa_shi_df$program_label
# check summary for each summary level
lapply(unique(cbsa_shi_df$program_label),function(x){
cbsa_shi_df %>%
filter(program_label == x) %>%
summary() %>% return()
})
cbsa_shi_df$Quarter %>% unique()
cbsa_shi_df$Quarter %>% unique() %>% openxlsx::convertToDate()
# fix the dates
cbsa_shi_df = cbsa_shi_df %>%
mutate(Quarter = Quarter %>% openxlsx::convertToDate() %>%
lubridate::year()) %>%
mutate(year = ifelse(is.na(year),Quarter,year))
cbsa_shi_df
cbsa_shi_df$year %>% table(useNA = "ifany")
test = cbsa_shi_df %>% filter(grepl("2009|2021",year))
View(test)
is.na(test$year) %>% sum()
is.na(test$code) %>% sum()
# remove where we are missing a CBSA code
cbsa_shi_df = cbsa_shi_df %>%
filter(!is.na(code))
cbsa_shi_df$year %>% table()
View(cbsa_shi_df)
rm("test")
# fix state variable
cbsa_shi_df$entities %>% head()
# fix state variable
cbsa_shi_df$entities %>% unqiue()
# fix state variable
cbsa_shi_df$entities %>% unique()
str_detect(unique(head(cbsa_shi_df$entities)),pattern = state.abb)
state.abb
str_match("askjaskjcbaksjbcjbh, AL",pattern = state.abb)
str_locate("asbakjsxk, MO-KS", state.abb)
str_locate("asbakjsxk, MO-KS", state.abb) %>% as.data.frame()
str_locate("asbakjsxk, MO-KS", state.abb) %>% as.data.frame() %>% filter(!is.na(start))
str_locate("asbakjsxk, MO-KS", state.abb) %>% as.data.frame() %>% filter(!is.na(start)) %>% summary()
str_locate("asbakjsxk, MO-KS", state.abb) %>% as.data.frame() %>% filter(!is.na(start)) %>% function(x){temp = c(.$start,.$end);return(min(temp))}
str_locate("asbakjsxk, MO-KS", state.abb) %>% as.data.frame() %>% filter(!is.na(start))
str_locate("asbakjsxk, MO-KS", state.abb) %>% as.data.frame() %>% filter(!is.na(start)) %>% min()
# pull the states
unique(cbsa_shi_df$entities %>% head()
)
# pull the states
unique(cbsa_shi_df$entities %>% head(n = 100))
# pull the states
sapply(unique(cbsa_shi_df$entities %>% head(n = 100)),
function(x){
# getting non empty data frame
temp = str_locate(x,pattern = state.abb) %>%
as.data.frame() %>% filter(!is.na(start))
x %>% substr(start = min(temp),
stop = max(temp)) %>% return()
})
# pull the states
sapply(unique(cbsa_shi_df$entities %>% head(n = 100)),
function(x){
# getting non empty data frame
temp = str_locate(x,pattern = c(state.abb,"PR")) %>%
as.data.frame() %>% filter(!is.na(start))
x %>% substr(start = min(temp),
stop = max(temp)) %>% return()
})
# pull the states
sapply(unique(cbsa_shi_df$entities),
function(x){
# getting non empty data frame
temp = str_locate(x,pattern = c(state.abb,"PR")) %>%
as.data.frame() %>% filter(!is.na(start))
x %>% substr(start = min(temp),
stop = max(temp)) %>% return()
})
# pull the states
sapply(unique(cbsa_shi_df$entities),
function(x){
# getting non empty data frame, need to include territories
temp = str_locate(x,
pattern = c(state.abb,
"PR","AS","GU","MP",
"TT","VI")) %>%
as.data.frame() %>% filter(!is.na(start))
x %>% substr(start = min(temp),
stop = max(temp)) %>% return()
})
# pull the states
sapply(unique(cbsa_shi_df$entities),
function(x){
# getting non empty data frame, need to include territories
temp = str_locate(x,
pattern = c(state.abb,
"PR","AS","GU","MP",
"TT","VI")) %>%
as.data.frame() %>% filter(!is.na(start))
x %>% substr(start = min(temp),
stop = max(temp)) %>% return()
}) %>% unlist()
# pull the states
lapply(unique(cbsa_shi_df$entities),
function(x){
# getting non empty data frame, need to include territories
temp = str_locate(x,
pattern = c(state.abb,
"PR","AS","GU","MP",
"TT","VI")) %>%
as.data.frame() %>% filter(!is.na(start))
x %>% substr(start = min(temp),
stop = max(temp)) %>% return()
}) %>% unlist()
# pull the states
test = data.frame(full_entities = unique(cbsa_shi_df$entities),
states = lapply(unique(cbsa_shi_df$entities),
function(x){
# getting non empty data frame, need to include territories
temp = str_locate(x,
pattern = c(state.abb,
"PR","AS","GU","MP",
"TT","VI")) %>%
as.data.frame() %>% filter(!is.na(start))
x %>% substr(start = min(temp),
stop = max(temp)) %>% return()
}) %>% unlist())
View(test)
entities_key = test
cbsa_shi_df$states %>% table()
cbsa_shi_df$state %>% table()
# add states
cbsa_shi_df = cbsa_shi_df %>%
mutate(states = entities %>% plyr::mapvalues(from = entities_key$full_entities,
to = entities_key$states))
cbsa_shi_df$states %>% table()
cbsa_shi_df$states %>% table() %>% sort()
# add states
cbsa_shi_df = cbsa_shi_df %>%
mutate(states = entities %>% plyr::mapvalues(from = entities_key$full_entities,
to = entities_key$states)) %>%
mutate(states = ifelse(states == "MISSIN",NA,states))
?mapply(function, ...)
?mapply
?map
cbsa_shi_df %>% summary()
cbsa_shi_df$total_units %>% unique()
# make total units numeric
cbsa_shi_df$total_units = cbsa_shi_df$total_units %>% as.numeric()
cbsa_shi_df$total_units %>% summary()
# remove negatives
cbsa_shi_df[cbsa_shi_df<0]
# remove negatives
cbsa_shi_df[,-12]
# remove negatives
cbsa_shi_df[-12,]
# remove negatives
cbsa_shi_df[-1:12,]
# remove negatives
cbsa_shi_df[-(1:12),]
# remove negatives
cbsa_shi_df[,-(1:12)]
# remove negatives
cbsa_shi_df[,-(1:11)]
?vapply()
# remove negatives
lapply(cbsa_shi_df[,-(1:11)],function(x){
x[x<0]
})
# remove negatives
lapply(cbsa_shi_df[,-(1:11)],function(x){
x[x<0] = NA
})
i=11
cbsa_shi_df[,i]
cbsa_shi_df[,12]
colnames(cbsa_shi_df)
cbsa_shi_df[,12]
cbsa_shi_df[,12][cbsa_shi_df[,12]<0]
cbsa_shi_df[,12][cbsa_shi_df[,12]<0&!is.na(cbsa_shi_df[,12])]
# remove negatives
for(i in 12:ncol(cbsa_shi_df)){
cbsa_shi_df[,i][cbsa_shi_df[,i]<0&!is.na(cbsa_shi_df[,i])] = NA
}
cbsa_shi_df %>% summary()
cbsa_shi_df$program_label %>% unique()
# check summary for each summary level
lapply(unique(cbsa_shi_df$program_label),function(x){
cbsa_shi_df %>%
filter(program_label == x) %>%
summary() %>% return()
})
# check summary for each summary level
lapply(unique(cbsa_shi_df$program_label),function(x){
print(x)
cbsa_shi_df %>%
filter(program_label == x) %>%
summary() %>% return()
})
cbsa_shi_df %>%
filter(program_label == x) %>%
summary() %>% as.data.frame() %>% return()
# check summary for each summary level
lapply(unique(cbsa_shi_df$program_label),function(x){
print(x)
cbsa_shi_df %>%
filter(program_label == x) %>%
summary() %>% as.data.frame() %>% return()
})
cbsa_shi_df %>%
filter(program_label == x) %>%
summary() %>% return()
# check summary for each summary level
lapply(unique(cbsa_shi_df$program_label),function(x){
print(x)
cbsa_shi_df %>%
filter(program_label == x) %>%
summary() %>% return()
})
print(paste(x))
# check summary for each summary level
lapply(unique(cbsa_shi_df$program_label),function(x){
print(paste(x))
cbsa_shi_df %>%
filter(program_label == x) %>%
summary() %>% return()
})
# check summary for each summary level
lapply(unique(cbsa_shi_df$program_label),function(x){
cbsa_shi_df %>%
filter(program_label == x) %>%
summary() %>% return()
x %>% return()
})
# check summary for each summary level
lapply(unique(cbsa_shi_df$program_label),function(x){
cbsa_shi_df %>%
filter(program_label == x) %>%
summary() %>% return()
print(x)
})
# check summary for each summary level
sapply(unique(cbsa_shi_df$program_label),function(x){
cbsa_shi_df %>%
filter(program_label == x) %>%
summary() %>% return()
})
# check summary for each summary level
lapply(unique(cbsa_shi_df$program_label),function(x){
cbsa_shi_df %>%
filter(program_label == x) %>%
summary() %>% return()
})
# check summary for each summary level
apply(unique(cbsa_shi_df$program_label),function(x){
cbsa_shi_df %>%
filter(program_label == x) %>%
summary() %>% return()
})
# check summary for each summary level
lapply(unique(cbsa_shi_df$program_label),function(x){
cbsa_shi_df %>%
filter(program_label == x) %>%
summary() %>% return()
})
# check tbl summary
cbsa_shi_df %>%
select(-year:sumlevel)
# check tbl summary
cbsa_shi_df %>%
select(-(year:sumlevel))
# check tbl summary
cbsa_shi_df %>%
select(-(year:sumlevel),-program,-name)
# check tbl summary
cbsa_shi_df %>%
select(-(year:sumlevel),-program,-name,-sub_program)
# check tbl summary
cbsa_shi_df %>%
select(-(year:sumlevel),-program,-name,-sub_program) %>%
tbl_summary(by = program_label)
library(gtsummary)
# check tbl summary
cbsa_shi_df %>%
select(-(year:sumlevel),-program,-name,-sub_program) %>%
tbl_summary(by = program_label)
?pivot_longer()
?pivot_wider()
?aggregate()
cbsa_shi_df[1,]
# save the data
save(cbsa_shi_df,file = "../Data/Cleaned Data/cbsa_shi_df.RData")
